
#include <iostream>

using namespace std;

int main()
{
    // 设计原则：
    // 1、开放封闭原则 ： 对扩展开放，对修改关闭
    // 2、单一职责原则 ： 每个类的职责尽量单一，避免耦合。
    // 3、依赖倒转原则 ： 抽象不应该依赖细节，细节应该依赖抽象。先实现功能细节，再由上层调用的方式，就是抽象依赖细节了，
    // 违背了这个原则，应该先设计接口，再实现细节。面向抽象编程，而不是针对细节编程，程序所有的依赖关系应该终止于抽象类或接口。
    // 4、里式替换原则 ： 子类应该可以替换父类，而不影响程序行为
    // 5、迪米特法则(最少知识法则)：如果两个不必直接通信，就不应该发生直接调用,可以通过第三者转发调用。这个法则旨在减少
    // 类的耦合度，但是也不能盲目调用，否则会造成过度封装。

}
